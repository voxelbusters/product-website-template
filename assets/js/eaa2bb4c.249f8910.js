"use strict";(self.webpackChunkdocusaurus_client=self.webpackChunkdocusaurus_client||[]).push([[504],{4360:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=i(5893),s=i(1151);const l={},r=void 0,d={id:"Usage/event-handling",title:"event-handling",description:"Events Handling",source:"@site/docs/03-Usage/05-event-handling.md",sourceDirName:"03-Usage",slug:"/Usage/event-handling",permalink:"/ads-kit-docs/Usage/event-handling",draft:!1,unlisted:!1,editUrl:"https://github.com/voxelbusters/ads-kit-docs/tree/main/docs/03-Usage/05-event-handling.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ads Management",permalink:"/ads-kit-docs/Usage/ads-management"},next:{title:"Sample Code",permalink:"/ads-kit-docs/Usage/sample-code"}},a={},c=[{value:"Events Handling",id:"events-handling",level:2},{value:"Step 1: Implement the IAdLifecycleEventListener Interface",id:"step-1-implement-the-iadlifecycleeventlistener-interface",level:3},{value:"Step 2: Register the Listener",id:"step-2-register-the-listener",level:3},{value:"Step 3: Unregister the Listener",id:"step-3-unregister-the-listener",level:3},{value:"Step 4: Define Event Handlers",id:"step-4-define-event-handlers",level:3},{value:"Step 5: Implement Event Handling Logic",id:"step-5-implement-event-handling-logic",level:3}];function o(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"events-handling",children:"Events Handling"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["For getting the callbacks for events you can either implement IAdLifeCycleListener or attach a callback to ",(0,t.jsx)(n.strong,{children:"AsyncOperation"})," returned by the api methods."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Registering for events in the Ads Kit plugin enables your application to respond to various ad lifecycle events, such as ad loading, displaying, clicking, and errors. Here's a concise guide on how to handle event registration:"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-implement-the-iadlifecycleeventlistener-interface",children:"Step 1: Implement the IAdLifecycleEventListener Interface"}),"\n",(0,t.jsxs)(n.p,{children:["Your class should implement the\xa0",(0,t.jsx)(n.code,{children:"IAdLifecycleEventListener"}),"\xa0interface to listen for ad lifecycle events. Here's an example implementation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class MyAdEventHandler : MonoBehaviour, IAdLifecycleEventListener\r\n{\r\n    public void OnInitialisationComplete(InitialiseResult result)\r\n    {\r\n        Debug.Log("AdsKit is initialised successfully.");\r\n    }\r\n\r\n    public void OnInitialisationFail(Error error)\r\n    {\r\n        Debug.Log($"AdsKit failed to initialise with error {error}.");\r\n    }\r\n\r\n    // Other event-handling methods for loading, showing, and failing to show ads.\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-register-the-listener",children:"Step 2: Register the Listener"}),"\n",(0,t.jsxs)(n.p,{children:["To start receiving event notifications, you need to register the listener with the AdsManager using the\xa0",(0,t.jsx)(n.code,{children:"RegisterListener"}),"\xa0method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"private void RegisterListener()\r\n{\r\n    AdsManager.RegisterListener(this);\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-unregister-the-listener",children:"Step 3: Unregister the Listener"}),"\n",(0,t.jsxs)(n.p,{children:["When you no longer want to receive event notifications, or before destroying the object, you should unregister the listener using the\xa0",(0,t.jsx)(n.code,{children:"UnregisterListener"}),"\xa0method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"private void UnregisterListener()\r\n{\r\n    AdsManager.UnregisterListener(this);\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-define-event-handlers",children:"Step 4: Define Event Handlers"}),"\n",(0,t.jsxs)(n.p,{children:["Within the class implementing\xa0",(0,t.jsx)(n.code,{children:"IAdLifecycleEventListener"}),", define handling logic for each of the following events:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnInitialisationComplete"}),": Called upon successful SDK initialization."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnInitialisationFail"}),": Called when SDK initialization fails."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnLoadAdComplete"}),": Called upon successfully loading an ad."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnLoadAdFail"}),": Called when an ad fails to load."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnShowAdStart"}),": Called when an ad starts to play."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnShowAdClick"}),": Called when the user clicks on the ad."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnShowAdComplete"}),": Called when an ad is no longer displayed. This can be either due to hiding an Ad or destroyed an Ad or closing an Ad.."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnShowAdFail"}),": Called when there is a failure to show the ad."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnAdImpressionRecorded"}),": Called when an ad impression is recorded."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OnAdPaid"}),": Called when an ad transaction is logged."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-5-implement-event-handling-logic",children:"Step 5: Implement Event Handling Logic"}),"\n",(0,t.jsx)(n.p,{children:"Provide concrete logic in your event handlers to define how your application should react to the events. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public void OnShowAdClick(string placementId)\r\n{\r\n    Debug.Log($"User clicked on ad placement: {placementId}.");\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>r});var t=i(7294);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);