"use strict";(self.webpackChunkdocusaurus_client=self.webpackChunkdocusaurus_client||[]).push([[137],{2451:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=r(5893),i=r(1151);const s={},a="Sample Code",o={id:"usage/sample-code",title:"Sample Code",description:"Below is a concise example demonstrating  the usage:",source:"@site/docs/03-usage/06-sample-code.md",sourceDirName:"03-usage",slug:"/usage/sample-code",permalink:"/docs/usage/sample-code",draft:!1,unlisted:!1,editUrl:"https://github.com/voxelbusters/ads-kit-docs/tree/main/docs/03-usage/06-sample-code.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"event-handling",permalink:"/docs/usage/event-handling"},next:{title:"GDPR Basics",permalink:"/docs/privacy-management/overview"}},d={},l=[];function c(e){const n={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"sample-code",children:"Sample Code"}),"\n",(0,t.jsx)(n.p,{children:"Below is a concise example demonstrating  the usage:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Import required namespaces"}),"\n",(0,t.jsx)(n.li,{children:"Initialization of the AdsKit with user consent."}),"\n",(0,t.jsx)(n.li,{children:"Registering event listeners for ad lifecycle events."}),"\n",(0,t.jsx)(n.li,{children:"Loading and showing ads with placement Ids."}),"\n",(0,t.jsx)(n.li,{children:"Implementing callbacks for successful and failed ad operations."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="C#"',children:'// Import required namespaces\r\nusing VoxelBusters.CoreLibrary;\r\nusing VoxelBusters.AdsKit;\r\n\r\n// Implement IAdLifecycleEventListener to listen for ad related events\r\npublic class AdsManager : MonoBehaviour, IAdLifecycleEventListener\r\n{\r\n    private void OnEnable()\r\n    {\r\n        AdsManager.RegisterListener(this);\r\n    }\r\n\r\n    private void OnDisable()\r\n    {\r\n        AdsManager.UnregisterListener(this);\r\n    }\r\n\r\n    private void Start()\r\n    {\r\n        InitializeAds();\r\n    }\r\n\r\n    public void InitializeAds(Action<bool> onComplete)\r\n    {\r\n       // This could be a default provider or your own custom implementation\r\n        IConsentFormProvider consentProvider = AdServices.GetConsentFormProvider();\r\n        var operation = AdsManager.Initialise(consentProvider);\r\n        operation.OnComplete += (result) =>\r\n        {\r\n            Debug.Log("Initialisation complete! Now start loading/displaying the ads.");\r\n            bool success = (result.InvalidNetworks.Length == 0);\r\n            onComplete?.Invoke(success);\r\n        };\r\n    }\r\n\r\n    // Get ad placement Id from Ad Placements section of General section in AdsKitSettings.\r\n    public void LoadAd(string placementId)\r\n    {\r\n        AdsManager.LoadAd(placementId);\r\n    }\r\n\r\n    // Get ad placement Id from Ad Placements section of General section in AdsKitSettings.\r\n    private void ShowAd(string placementId)\r\n    {\r\n        AdsManager.ShowAd(placementId);\r\n    }\r\n\r\n    // Get ad placement Id from Ad Placements section of General section in AdsKitSettings.\r\n    private void HideAd(string placementId)\r\n    {\r\n        // HideAd only applicable to Banner Ad Type alone.\r\n        AdsManager.HideAd(placementId, destroy: false);\r\n    }\r\n\r\n    #region IAdLifecycleEventListener implementation\r\n\r\n    public void OnInitialisationComplete(InitialiseResult result)\r\n    {\r\n\u2003\u2003    Debug.Log("AdsKit is initialised successfully.");\r\n    }\r\n\r\n    public void OnInitialisationFail(Error error)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit failed to initialise with error {error}.");\r\n    }\r\n\r\n    public void OnLoadAdComplete(string placementId, LoadAdResult result)\r\n    {\r\n\u2003\u2003    Log($"AdsKit has successfully loaded ad for placementId: {placementId}.");\r\n    }\r\n\r\n    public void OnLoadAdFail(string placementId, Error error)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has failed to load ad for placementId: {placementId} with error: {error}.");\r\n    }\r\n\r\n    public void OnShowAdStart(string placementId)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has started showing ad for placementId: {placementId}.");\r\n    }    \r\n\r\n    public void OnShowAdClick(string placementId)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has recognised click on ad for placementId: {placementId}.");\r\n    }\r\n\r\n    public void OnShowAdComplete(string placementId, ShowAdResult result)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has completed showing ad for placementId: {placementId} with result: {result}.");\r\n    }\r\n\r\n    public void OnShowAdFail(string placementId, Error error)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has failed to show ad for placementId: {placementId} with Error: {error}.");\r\n    }\r\n\r\n    public void OnAdImpressionRecorded(string placementId)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has recorded impression for ad for placementId: {placementId}.");\r\n    }\r\n\r\n    public void OnAdPaid(string placementId, AdTransaction transaction)\r\n    {\r\n\u2003\u2003    Debug.Log($"AdsKit has recorded pay for ad: {placementId} with transaction: {transaction}.");\r\n    }\r\n\r\n    #endregion\r\n}\r\n\r\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example,\xa0",(0,t.jsx)(n.code,{children:"AdsManager"}),"\xa0is a MonoBehaviour that initializes the AdsKit when the game starts. It registers itself as an\xa0",(0,t.jsx)(n.code,{children:"IAdLifecycleEventListener"}),"\xa0to handle ad events."]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var t=r(7294);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);